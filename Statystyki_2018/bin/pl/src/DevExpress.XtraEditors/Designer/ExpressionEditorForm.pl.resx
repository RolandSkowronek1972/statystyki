<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"></xsd:import>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"></xsd:element>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"></xsd:attribute>
              <xsd:attribute name="type" type="xsd:string"></xsd:attribute>
              <xsd:attribute name="mimetype" type="xsd:string"></xsd:attribute>
              <xsd:attribute ref="xml:space"></xsd:attribute>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"></xsd:attribute>
              <xsd:attribute name="name" type="xsd:string"></xsd:attribute>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"></xsd:element>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"></xsd:element>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"></xsd:attribute>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"></xsd:attribute>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"></xsd:attribute>
              <xsd:attribute ref="xml:space"></xsd:attribute>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"></xsd:element>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"></xsd:attribute>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="buttonCancel.Text" xml:space="preserve">
    <value>Anuluj</value>
  </data>
  <data name="buttonOK.Text" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="Parameters.Text" xml:space="preserve">
    <value>Parametry</value>
  </data>
  <data name="Fields.Text" xml:space="preserve">
    <value>Pola</value>
  </data>
  <data name="functionsTypes.Properties.AllItems" xml:space="preserve">
    <value>(Wszystko)</value>
  </data>
  <data name="Abs.Description" xml:space="preserve">
    <value>Abs(wartość)
Zwraca wartość bezwzględną, wartość dodatnią dla podanego wyrażenia.</value>
  </data>
  <data name="Acos.Description" xml:space="preserve">
    <value>Acos(Wartość)
Zwraca acos wartości (kąta w radianach, którego kosinus jest wyrażeniem zmiennoprzecinkowym).</value>
  </data>
  <data name="AddDays.Description" xml:space="preserve">
    <value>AddDays(DataGodzina,IlośćDni)
Zwraca godzine i datę (DateTime) z dodaną ilością dni do podanej daty (DataGodzina).</value>
  </data>
  <data name="AddHours.Description" xml:space="preserve">
    <value>AddHours(DataGodzina,IlośćGodzin)
Zwraca godzine i datę (DateTime) z dodaną ilością godzin do podanej daty (DataGodzina).</value>
  </data>
  <data name="AddMilliSeconds.Description" xml:space="preserve">
    <value>AddMilliSeconds(DataGodzina,IlośćMilisekund)
Zwraca godzine i datę (DateTime) z dodaną ilością milisekund do podanej daty (DataGodzina).</value>
  </data>
  <data name="AddMinutes.Description" xml:space="preserve">
    <value>AddMinutes(DataGodzina,IlośćMinut)
Zwraca godzine i datę (DateTime) z dodaną ilością minut do podanej daty (DataGodzina).</value>
  </data>
  <data name="AddMonths.Description" xml:space="preserve">
    <value>AddMonths(DataGodzina,IlośćMiesięcy)
Zwraca godzine i datę (DateTime) z dodaną ilością miesięcy do podanej daty (DataGodzina).</value>
  </data>
  <data name="Constants.Text" xml:space="preserve">
    <value>Stałe</value>
  </data>
  <data name="Concat.Description" xml:space="preserve">
    <value>Concat(Tekst1, ... , TekstN)
Zwraca tekst zawierający złączenie tekstów od Tekst1 do TekstN.</value>
  </data>
  <data name="AddSeconds.Description" xml:space="preserve">
    <value>AddSeconds(DataGodzina,IlośćSekund)
Zwraca godzine i datę (DateTime) z dodaną ilością sekund do podanej daty (DataGodzina).</value>
  </data>
  <data name="AddTicks.Description" xml:space="preserve">
    <value>AddTicks(DataGodzina,IlośćUderzeń)
Zwraca godzine i datę (DateTime) z dodaną ilością uderzeń do podanej daty (DataGodzina). Uderzenie (Tick) to 1/10000 milisekundy.</value>
  </data>
  <data name="AddTimeSpan.Description" xml:space="preserve">
    <value>AddTimeSpan(DataGodzina,PrzedziałCzasu)
Zwraca godzine i datę (DateTime) z dodanym przedziałem czasu do podanej daty (DataGodzina).</value>
  </data>
  <data name="AddYears.Description" xml:space="preserve">
    <value>AddYears(DataGodzina,IlośćLat)
Zwraca godzine i datę (DateTime) z dodaną ilością lat do podanej daty (DataGodzina).</value>
  </data>
  <data name="Ascii.Description" xml:space="preserve">
    <value>Ascii(Text)
Zwraca kod ASCII dla znaku najbardziej  na lewo w wyrażeniu.</value>
  </data>
  <data name="Asin.Description" xml:space="preserve">
    <value>Asin(Wartość)
Zwraca asin z wartosci (kąta w radianach, którego sinus jest podanym wyrażeniem zmiennoprzecinkowym).</value>
  </data>
  <data name="Atn.Description" xml:space="preserve">
    <value>Atan(Wartość)
Zwraca arctan z wartosci (kąta w radianach, którego tangens jest podanym wyrażeniem zmiennoprzecinkowym).</value>
  </data>
  <data name="Atn2.Description" xml:space="preserve">
    <value>Atan2(Wartość1, Wartość2)
Zwraca kąt którego tangens określają dwie wartości numeryczne w radianach.</value>
  </data>
  <data name="BigMul.Description" xml:space="preserve">
    <value>BigMul(Wartość1, Wartość2)
Zwraca wartość typu Int64 będąca mnożeniem dwóch wartości typu Int32.
</value>
  </data>
  <data name="Ceiling.Description" xml:space="preserve">
    <value>Ceiling(Wartość)
Zwraca najmniejszą liczbę całkowitą, która jest większa lub równa podanemu wyrażeniu numerycznemu.</value>
  </data>
  <data name="Char.Description" xml:space="preserve">
    <value>Char(Numer)
Zamienia liczbę całkowita na kod ASCII.</value>
  </data>
  <data name="CharIndex.Description" xml:space="preserve">
    <value>CharIndex(Tekst1, Tekst2)
Zwraca pozycje początkową Tekst1 w Tekst2, zaczynając od pozycji 0 do końca tekstu.</value>
  </data>
  <data name="CharIndex3Param.Description" xml:space="preserve">
    <value>CharIndex(Tekst1, Tekst2, PozycjaPoczątkowa)
Zwraca pozycje początkową Tekst1 w Tekst2, zaczynając od pozycji PozycjaPoczątkowa do końca tekstu.</value>
  </data>
  <data name="Cos.Description" xml:space="preserve">
    <value>Cos(wartość)
Zwraca cosinus dla kąta zdefiniowanego w radianach.</value>
  </data>
  <data name="Cosh.Description" xml:space="preserve">
    <value>Cosh(wartość)
Zwraca cosinus hyperboliczny dla kąta zdefiniowanego w radianach.</value>
  </data>
  <data name="DateDiffDay.Description" xml:space="preserve">
    <value>DateDiffDay(dataPoczątkowa, dataKońcowa)
Zwraca ilość dni pomiędzy dwiema niepustymi datami.</value>
  </data>
  <data name="DateDiffHour.Description" xml:space="preserve">
    <value>DateDiffHour(dataPoczątkowa, dataKońcowa)
Zwraca ilość godzin pomiędzy dwiema niepustymi datami.</value>
  </data>
  <data name="DateDiffMilliSecond.Description" xml:space="preserve">
    <value>DateDiffMiliSecond(dataPoczątkowa, dataKońcowa)
Zwraca ilość milisekund pomiędzy dwiema niepustymi datami.</value>
  </data>
  <data name="DateDiffMinute.Description" xml:space="preserve">
    <value>DateDiffMinute(dataPoczątkowa, dataKońcowa)
Zwraca ilość minut pomiędzy dwiema niepustymi datami.</value>
  </data>
  <data name="DateDiffMonth.Description" xml:space="preserve">
    <value>DateDiffMiounth(dataPoczątkowa, dataKońcowa)
Zwraca ilość miesięcy pomiędzy dwiema niepustymi datami.</value>
  </data>
  <data name="DateDiffSecond.Description" xml:space="preserve">
    <value>DateDiffSecond(dataPoczątkowa, dataKońcowa)
Zwraca ilość sekund pomiędzy dwiema niepustymi datami.</value>
  </data>
  <data name="DateDiffTick.Description" xml:space="preserve">
    <value>DateDiffTick(dataPoczątkowa, dataKońcowa)
Zwraca ilość ticków (tick = 1/20000 milisekundy) pomiędzy dwiema niepustymi datami.</value>
  </data>
  <data name="DateDiffYear.Description" xml:space="preserve">
    <value>DateDiffYear(dataPoczątkowa, dataKońcowa)
Zwraca ilość lat pomiędzy dwiema niepustymi datami.</value>
  </data>
  <data name="Divide.Description" xml:space="preserve">
    <value>Dzieli pierwszy argument przez drugi.</value>
  </data>
  <data name="BitwiseOr.Description" xml:space="preserve">
    <value>Porównuje każdy bit pierwszego argumentu z odpowiednim bitem drugiego argumentu. Jeżeli jeden z bitów jest 1, odpowiedni bit wyniku jest ustawiany na 1. W innym przypadku odpowiedni bit wyniku jest ustawiany na 0.</value>
  </data>
  <data name="BitwiseAnd.Description" xml:space="preserve">
    <value>Wykonuje binarną logiczną operację I (AND) pomiędzy dwoma wartościami numerycznymi.</value>
  </data>
  <data name="BitwiseXor.Description" xml:space="preserve">
    <value>Wykonuje logiczne wykluczenie na dwóch wartościach logicznych, lub binarne wykluczenie na dwóch wyrażeniach numerycznych.</value>
  </data>
  <data name="Equal.Description" xml:space="preserve">
    <value>Zwraca prawde (true) jezeli oba argumenty mają tą samą wartość. W innym przypadku zwraca fałsz (false).</value>
  </data>
  <data name="Between.Description" xml:space="preserve">
    <value>Between (,)
Określa zakres do przetestowania. Zwraca prawdę (true) jeżeli wartość jest większa bądź równa pierwszemu argumentowi i mniejsza lub równa drugiemu argumentowi.</value>
  </data>
  <data name="And.Description" xml:space="preserve">
    <value>Wykonuje logiczną dysjunkcję na dwóch wyrażeniach logicznych.</value>
  </data>
  <data name="Condition.Text" xml:space="preserve">
    <value>Edytor warunków</value>
  </data>
  <data name="CurrentRowIndex.Description" xml:space="preserve">
    <value>Zwraca pozycje aktualnyego wiersza danych w źródle danych. Miej na uwadze że pozycja rozpoczyna się od zera.</value>
  </data>
  <data name="Condition.Caption" xml:space="preserve">
    <value>Edytor wyrażeń warunkowych</value>
  </data>
  <data name="functionsTypes.Properties.DateTimeItems" xml:space="preserve">
    <value>Data i czas</value>
  </data>
  <data name="functionsTypes.Properties.LogicalItems" xml:space="preserve">
    <value>Logiczne</value>
  </data>
  <data name="functionsTypes.Properties.MathItems" xml:space="preserve">
    <value>Matematyczne</value>
  </data>
  <data name="functionsTypes.Properties.StringItems" xml:space="preserve">
    <value>Tekst</value>
  </data>
  <data name="Functions.Text" xml:space="preserve">
    <value>Funkcje</value>
  </data>
  <data name="Operators.Text" xml:space="preserve">
    <value>Operatory</value>
  </data>
  <data name="Len.Description" xml:space="preserve">
    <value>Len(wartość)
Zwraca ilość bajtów potrzebną do przechowania podanej wartości.</value>
  </data>
  <data name="Iif.Description" xml:space="preserve">
    <value>Iif(Wyrażenie, Pozytywna, Negatywna)
Zwraca odpowiednią cześć Pozytywną lub Negatywną w zależności od wyniku logicznego wyrazenia.</value>
  </data>
  <data name="IsNull.Description" xml:space="preserve">
    <value>IsNull(wartość)
Zwraca prawdę jeżeli podana wartość jest NULL.</value>
  </data>
  <data name="Lower.Description" xml:space="preserve">
    <value>Lower(Tekst)
Zwraca tekst pisany małymi literami.</value>
  </data>
  <data name="Exp.Description" xml:space="preserve">
    <value>Exp(wartość)
Zwraca wartość ekspotencjalną z podanego wyrażenia zmienno-przecinkowego.</value>
  </data>
  <data name="Floor.Description" xml:space="preserve">
    <value>Floor(wartość)
Zwraca największą wartość całkowitą mniejszą lub równą dla zadanego wyrażenia.</value>
  </data>
  <data name="GetDate.Description" xml:space="preserve">
    <value>GetDate(DzieńCzas)
Wyciąga datę z argumentu.</value>
  </data>
  <data name="GetDay.Description" xml:space="preserve">
    <value>GetDay(DzieńCzas)
Wyciąga dzień z argumentu.</value>
  </data>
  <data name="GetDayOfWeek.Description" xml:space="preserve">
    <value>GetDayOfWeek(DzieńCzas)
Wyciąga dzień tygodnia z argumentu.</value>
  </data>
  <data name="GetDayOfYear.Description" xml:space="preserve">
    <value>GetDayOfYear(DzieńCzas)
Wyciąga dzień roku z argumentu.</value>
  </data>
  <data name="GetHour.Description" xml:space="preserve">
    <value>GetHour(DzieńCzas)
Wyciąga godzinę z argumentu.</value>
  </data>
  <data name="GetMilliSecond.Description" xml:space="preserve">
    <value>GetMiliSeconds(DzieńCzas)
Wyciąga milisekundy z argumentu.</value>
  </data>
  <data name="GetMinute.Description" xml:space="preserve">
    <value>GetMinute(DzieńCzas)
Wyciąga minuty z argumentu.</value>
  </data>
  <data name="GetMonth.Description" xml:space="preserve">
    <value>GetMonth(DzieńCzas)
Wyciąga miesiąc z argumentu.</value>
  </data>
  <data name="GetSecond.Description" xml:space="preserve">
    <value>GetSecond(DzieńCzas)
Wyciąga sekundy z argumentu.</value>
  </data>
  <data name="GetTimeOfDay.Description" xml:space="preserve">
    <value>GetTimeOfDay(DzieńCzas)
Wyciąga czas z dnia z argumentu, w Tickach (1/20000 milisekundy)</value>
  </data>
  <data name="GetYear.Description" xml:space="preserve">
    <value>GetYear(DzieńCzas)
Wyciąga rok z argumentu.</value>
  </data>
  <data name="IsNullOrEmpty.Description" xml:space="preserve">
    <value>IsNullOrEmpty(Tekst)
Zwraca True (Prawda) jeżeli podany Tekst jest obiektem NULL lub jest pustym słowem, w innym przypadku zwraca False (Fałsz).</value>
  </data>
  <data name="Log.Description" xml:space="preserve">
    <value>Log(wartość)
Zwraca naturalny logarytm z podanej wartości.</value>
  </data>
  <data name="Log2Param.Description" xml:space="preserve">
    <value>Log(wartość, podstawa)
Zwraca logarytm o podanej podstawie z podanej wartości.</value>
  </data>
  <data name="Log10.Description" xml:space="preserve">
    <value>Log10(wartość)
Zwraca logarytm o podstawie dziesiętnej z podanej wartości.</value>
  </data>
  <data name="Now.Description" xml:space="preserve">
    <value>Now()
Zwraca aktualną datę i czas.</value>
  </data>
  <data name="PadLeft.Description" xml:space="preserve">
    <value>PadLeft(Tekst, Długość)
Uzupełnia Tekst z lewej strony o znak odstępu (spacja), aby Tekst osiągnął podaną Długość.
</value>
  </data>
  <data name="PadLeft3Param.Description" xml:space="preserve">
    <value>PadLeft(Tekst, Długość, Znak)
Uzupełnia Tekst z lewej strony o Znak, aby Tekst osiągnął podaną Długość.</value>
  </data>
  <data name="PadRight.Description" xml:space="preserve">
    <value>PadRight(Tekst, Długość)
Uzupełnia Tekst z prawej strony o znak odstępu (spacja), aby Tekst osiągnął podaną Długość.</value>
  </data>
  <data name="PadRight3Param.Description" xml:space="preserve">
    <value>PadRight(Tekst, Długość, Znak)
Uzupełnia Tekst z prawej strony o Znak, aby Tekst osiągnął podaną Długość.</value>
  </data>
  <data name="Power.Description" xml:space="preserve">
    <value>Power(wartość, potęga)
Zwraca wartosć podniesioną do okreslonej potęgi.</value>
  </data>
  <data name="Remove.Description" xml:space="preserve">
    <value>Remove(Tekst, PozycjaPoczątkowa, Długość)
Usuwa określoną ilość znaków z Tekst, rozpoczynając w okreslonej pozycji (PozycjaPoczątkowa).</value>
  </data>
  <data name="Insert.Description" xml:space="preserve">
    <value>Insert(Tekst1, PozycjaStartowa, Tekst2)
Wstawia Tekst2 w Tekst1 w pozycji okreslonej przez PozycjaStartowa</value>
  </data>
  <data name="Fields Description Prefix" xml:space="preserve">
    <value>Typ tego pola to:</value>
  </data>
  <data name="GridFields Description Prefix" xml:space="preserve">
    <value>Opis pola: {1} Typ pola to: {2}</value>
  </data>
  <data name="Parameters Description Prefix" xml:space="preserve">
    <value>Typ tego parametru to:</value>
  </data>
  <data name="Plus.Description" xml:space="preserve">
    <value>Dodaje wartość jednego z wyrażeń numerycznych to kolejnego, lub łączy dwa ciagi znaków.</value>
  </data>
  <data name="Minus.Description" xml:space="preserve">
    <value>Szuka różnic pomiędzy dwiema wartościami.</value>
  </data>
  <data name="Multiply.Description" xml:space="preserve">
    <value>Mnoży wartość dwóch wyrażeń</value>
  </data>
  <data name="Modulo.Description" xml:space="preserve">
    <value>Zwraca resztę (wartość bezwzględną) z dzielenia jednego wyrażenia numerycznego przez drugi.</value>
  </data>
  <data name="NotEqual.Description" xml:space="preserve">
    <value>Zwraca prawde (true) jezeli oba argumenty nie mają tej samej wartości. W innym przypadku zwraca fałsz (false).</value>
  </data>
  <data name="Less.Description" xml:space="preserve">
    <value>Operator mniejszy niż. Używany do porównania wyrażeń.</value>
  </data>
  <data name="LessOrEqual.Description" xml:space="preserve">
    <value>Operator mniejszy lub równy niż. Używany do porównania wyrażeń.</value>
  </data>
  <data name="GreaterOrEqual.Description" xml:space="preserve">
    <value>Operator większy lub równy niż. Używany do porównania wyrażeń.</value>
  </data>
  <data name="Greater.Description" xml:space="preserve">
    <value>Operator większy niż. Używany do porównania wyrażeń.</value>
  </data>
  <data name="In.Description" xml:space="preserve">
    <value>In(,,,)
Testuje istnienie własności obiektu.</value>
  </data>
  <data name="Like.Description" xml:space="preserve">
    <value>Porównuje ciag znaków z wzorcem. Jeżeli ciąg odpowiada wzorcowi, wynik jest prawdą (true). Jeżeli ciąg nie odpowiada wzorcowi wynik jest fałszem (false). Jeżeli ciąg i wzorzec jest pustym ciągiem znaków, wynik jest prawda (true).</value>
  </data>
  <data name="Or.Description" xml:space="preserve">
    <value>Wykonuje logiczną dysjunkcję na dwóch wartościach logicznych.</value>
  </data>
  <data name="Not.Description" xml:space="preserve">
    <value>Wykonuje logiczną negację wyrażenia.</value>
  </data>
  <data name="False.Description" xml:space="preserve">
    <value>Reprezentuje wartość logiczną Fałsz (False).</value>
  </data>
  <data name="Null.Description" xml:space="preserve">
    <value>Reprezentuje brak odniesienia, brak odniesienia/powiązania do żadnego obiektu.</value>
  </data>
  <data name="Expression.Text" xml:space="preserve">
    <value>Edytor wyrażeń</value>
  </data>
  <data name="Max.Description" xml:space="preserve">
    <value>Max(wartość1,wartość2)
Zwraca maksymalną wartość z podanych.</value>
  </data>
  <data name="Min.Description" xml:space="preserve">
    <value>Min(wartość1, wartość2)
Zwraca minimalną wartość z podanych.</value>
  </data>
  <data name="Trim.Description" xml:space="preserve">
    <value>Trim(Tekst)
Usuwa wszystkie z przodu i z tyłu białe znaki (spacje) z Tekstu.</value>
  </data>
  <data name="Substring3param.Description" xml:space="preserve">
    <value>Substring(Tekst, PozycjaPoczątkowa, Długość)
Zwraca podciąg z ciągu Tekst zaczynający się od pozycji PozycjaPoczątkowa o zadanej długości.</value>
  </data>
  <data name="Upper.Description" xml:space="preserve">
    <value>Upper(Tekst)
Zwraca tekst pisany wielkimi literami.</value>
  </data>
  <data name="Replace.Description" xml:space="preserve">
    <value>Replace(Tekst1,Tekst2, Tekst3)
Zwraca kopię Tekst1, w której Tekst2 został zastąpiony Tekst3.</value>
  </data>
  <data name="Reverse.Description" xml:space="preserve">
    <value>Reverse(Tekst)
Odwraca kolejność elementów w tekście.</value>
  </data>
  <data name="Rnd.Description" xml:space="preserve">
    <value>Rnd()
Zwraca losową wartość numeryczną mniejszą od 1, ale większoą lub równą 0.</value>
  </data>
  <data name="Round.Description" xml:space="preserve">
    <value>Round(Wartość)
Zaokrągla wartość do najbliższej wartości całkowitej.</value>
  </data>
  <data name="Sign.Description" xml:space="preserve">
    <value>Sign(Wartość)
Zwraca pozytywna (+1), zero (0) lub negatywna (-1) znak podanego wyrażenia.</value>
  </data>
  <data name="Sin.Description" xml:space="preserve">
    <value>Sin(wartość)
Zwraca sinus dla kąta zdefiniowanego w radianach.</value>
  </data>
  <data name="Sinh.Description" xml:space="preserve">
    <value>Sinh(wartość)
Zwraca sinus hyperboliczny dla kąta zdefiniowanego w radianach.</value>
  </data>
  <data name="Sqr.Description" xml:space="preserve">
    <value>Sqr(wartość)
Zwraca kwadrat podanej wartości.</value>
  </data>
  <data name="Tan.Description" xml:space="preserve">
    <value>Tan(wartość)
Zwraca tangens dla kąta zdefiniowanego w radianach.</value>
  </data>
  <data name="Tanh.Description" xml:space="preserve">
    <value>Tanh(wartość)
Zwraca tangens hyperboliczny dla kąta zdefiniowanego w radianach.</value>
  </data>
  <data name="Today.Description" xml:space="preserve">
    <value>Today()
Zwraca aktualną datę. Niezaleznie od aktualnego czasu, funkcja zwraca północ aktualnego dnia.</value>
  </data>
  <data name="ToStr.Description" xml:space="preserve">
    <value>ToStr(Wartość)
Zwraca tekst reprezentowany przez obiekt.</value>
  </data>
  <data name="UtcNow.Description" xml:space="preserve">
    <value>UtcNow()
Zwraca aktualną datę i czas systemowy, wyrazony w UTC.</value>
  </data>
  <data name="True.Description" xml:space="preserve">
    <value>Reprezentuje wartość logiczną Prawda (True).</value>
  </data>
  <data name="Substring2param.Description" xml:space="preserve">
    <value>Substring(Tekst, PozycjaPoczątkowa)
Zwraca podciąg z ciągu Tekst zaczynający się od pozycji PozycjaPoczątkowa.</value>
  </data>
  <data name="Variables.Text" xml:space="preserve">
    <value>Zmienne</value>
  </data>
  <data name="RowCount.Description" xml:space="preserve">
    <value>Zwraca całkowieą liczbę wierszy w źródle danych.</value>
  </data>
  <data name="UnboundColumn.Caption" xml:space="preserve">
    <value>Edytor wyrażeń</value>
  </data>
  <data name="$this.Text" xml:space="preserve">
    <value>Edytor wyrażeń</value>
  </data>
  <data name="CountAggregate.Description" xml:space="preserve">
    <value>Count()
Zwraca liczbę obiektów w kolekcji.</value>
  </data>
  <data name="ExistsAggregate.Description" xml:space="preserve">
    <value>Exists()
Określa, czy obiekt istnieje w kolekcji.</value>
  </data>
  <data name="functionsTypes.Properties.AggregateItems" xml:space="preserve">
    <value>Agregacja</value>
  </data>
  <data name="AvgAggregate.Description" xml:space="preserve">
    <value>Avg(Value)
Oblicza średnią z wartości w kolekcji.</value>
  </data>
  <data name="MaxAggregate.Description" xml:space="preserve">
    <value>Max(Value)
Zwraca wartość maksymalną wyrażenie w zbiorze.</value>
  </data>
  <data name="ToDecimal.Description" xml:space="preserve">
    <value>ToDecimal(Value)
Konwertuje wartość na równoważną liczbę dziesiętną.</value>
  </data>
  <data name="SingleAggregate.Description" xml:space="preserve">
    <value>Single()
Zwraca pojedynczy obiekt z kolekcji.</value>
  </data>
  <data name="SumAggregate.Description" xml:space="preserve">
    <value>Sum(Value)
Zwraca sumę wszystkich wartości wyrażenie kolekcja.</value>
  </data>
  <data name="ToDouble.Description" xml:space="preserve">
    <value>ToDouble(Value)
Konwertuje wartość na równoważne 64-bitowych podwójnej precyzji zmiennoprzecinkowych numer.</value>
  </data>
  <data name="ToInt.Description" xml:space="preserve">
    <value>ToInt(Value)
Konwertuje wartość na odpowiednik 32-bitową całkowitą podpisane.</value>
  </data>
  <data name="ToLong.Description" xml:space="preserve">
    <value>ToLong(Value)
Konwertuje wartość równoważną 64-bitową całkowitą podpisane.</value>
  </data>
  <data name="LocalDateTimeDayAfterTomorrow.Description" xml:space="preserve">
    <value>LocalDateTimeDayAfterTomorrow()
Zwraca wartość daty i godziny odpowiadające pojutrze.</value>
  </data>
  <data name="LocalDateTimeLastWeek.Description" xml:space="preserve">
    <value>LocalDateTimeLastWeek()
Zwraca wartość daty i godziny odpowiadające pierwszy dzień poprzedniego tygodnia,.</value>
  </data>
  <data name="LocalDateTimeNextMonth.Description" xml:space="preserve">
    <value>LocalDateTimeNextMonth()
Zwraca wartość daty i godziny odpowiadające pierwszego dnia następnego miesiąca.</value>
  </data>
  <data name="LocalDateTimeNextWeek.Description" xml:space="preserve">
    <value>LocalDateTimeNextWeek()
Zwraca wartość daty i godziny odpowiadające na pierwszy dzień następnego tygodnia.</value>
  </data>
  <data name="LocalDateTimeNextYear.Description" xml:space="preserve">
    <value>LocalDateTimeNextYear()
Zwraca wartość daty i godziny odpowiadające pierwszego dnia roku następnego.</value>
  </data>
  <data name="LocalDateTimeNow.Description" xml:space="preserve">
    <value>LocalDateTimeNow()
Zwraca wartość daty i godziny odpowiadające w czasie, w chwili obecnej.</value>
  </data>
  <data name="LocalDateTimeThisMonth.Description" xml:space="preserve">
    <value>LocalDateTimeThisMonth()
Zwraca wartość daty i godziny odpowiadające pierwszego dnia bieżącego miesiąca.</value>
  </data>
  <data name="LocalDateTimeThisWeek.Description" xml:space="preserve">
    <value>LocalDateTimeThisWeek()
Zwraca wartość daty i godziny odpowiadające pierwszego dnia bieżącego tygodnia.</value>
  </data>
  <data name="LocalDateTimeThisYear.Description" xml:space="preserve">
    <value>LocalDateTimeThisYear()
Zwraca wartość daty i godziny odpowiadające na pierwszy dzień roku bieżącego.</value>
  </data>
  <data name="LocalDateTimeToday.Description" xml:space="preserve">
    <value>LocalDateTimeToday()
Zwraca wartość daty i godziny odpowiadające dzisiaj.</value>
  </data>
  <data name="LocalDateTimeTomorrow.Description" xml:space="preserve">
    <value>LocalDateTimeTomorrow()
Zwraca wartość daty i godziny odpowiadające jutro.</value>
  </data>
  <data name="LocalDateTimeTwoWeeksAway.Description" xml:space="preserve">
    <value>LocalDateTimeTwoWeeksAway()
Zwraca wartość daty i godziny odpowiadające pierwszego dnia tygodnia, czyli po w przyszłym tygodniu.</value>
  </data>
  <data name="LocalDateTimeYesterday.Description" xml:space="preserve">
    <value>LocalDateTimeYesterday()
Zwraca wartość daty i godziny odpowiadające wczoraj.</value>
  </data>
  <data name="MinAggregate.Description" xml:space="preserve">
    <value>Min(Value)
Zwraca wartość minimalna wyrażenia w zbiorze.</value>
  </data>
  <data name="IsThisMonth.Description" xml:space="preserve">
    <value>IsThisMonth(DateTime)
Zwraca True Jeśli określony Data wypada w bieżącym miesiącu.</value>
  </data>
  <data name="IsThisWeek.Description" xml:space="preserve">
    <value>IsThisWeek(DateTime)
Zwraca True Jeśli określony Data wypada w ciągu bieżącego tygodnia.</value>
  </data>
  <data name="IsThisYear.Description" xml:space="preserve">
    <value>IsThisYear(DateTime)
Zwraca True Jeśli określony Data wypada w bieżącym roku.</value>
  </data>
  <data name="Round2Param.Description" xml:space="preserve">
    <value>Round(wartość, precyzja)
Zaokrągla podaną wartość do najbliższej liczby całkowitej lub do określonej liczby miejsc dziesiętnych.</value>
  </data>
  <data name="Contains.Description" xml:space="preserve">
    <value>Zawiera (String, podciągu)
Zwraca wartość PRAWDA, jeśli występuje podciąg ciągu; w przeciwnym wypadku, zwracana jest wartość False.</value>
  </data>
  <data name="StartsWith.Description" xml:space="preserve">
    <value>StartsWith(String, StartString)
Zwraca wartość True, jeśli na początku ciąg pasuje do StartString; w przeciwnym wypadku, zwracana jest wartość False.</value>
  </data>
  <data name="ToFloat.Description" xml:space="preserve">
    <value>ToFloat(Value)
Konwertuje wartość na odpowiednia liczba zmiennoprzecinkowa pojedyncza precyzja 32-bitowych.</value>
  </data>
  <data name="FormatRule.Caption" xml:space="preserve">
    <value>Formacie regułę Edytor wyrażeń</value>
  </data>
  <data name="Remove2Param.Description" xml:space="preserve">
    <value>(String, poprzedniego stanu)
Usuwa wszystkie znaki z tego wystąpienia, począwszy od pozycji określonej.</value>
  </data>
  <data name="Remove3Param.Description" xml:space="preserve">
    <value>(String, StartPosition, długość)
Usuwa określoną liczbę znaków od tego wystąpienia, począwszy od pozycji określonej.</value>
  </data>
</root>