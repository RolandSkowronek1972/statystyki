<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--***************************************************************************
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//*****************************************************************************
-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"></xsd:import>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"></xsd:element>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"></xsd:attribute>
              <xsd:attribute name="type" type="xsd:string"></xsd:attribute>
              <xsd:attribute name="mimetype" type="xsd:string"></xsd:attribute>
              <xsd:attribute ref="xml:space"></xsd:attribute>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"></xsd:attribute>
              <xsd:attribute name="name" type="xsd:string"></xsd:attribute>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"></xsd:element>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"></xsd:element>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"></xsd:attribute>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"></xsd:attribute>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"></xsd:attribute>
              <xsd:attribute ref="xml:space"></xsd:attribute>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"></xsd:element>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"></xsd:attribute>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ExpressionEditorStringId.Constant_True" xml:space="preserve">
    <value>Reprezentuje wartość logiczną Prawda (True).</value>
  </data>
  <data name="ExpressionEditorStringId.Constant_False" xml:space="preserve">
    <value>Reprezentuje wartość logiczną Fałsz (False).</value>
  </data>
  <data name="ExpressionEditorStringId.Constant_Null" xml:space="preserve">
    <value>Reprezentuje brak odniesienia, brak odniesienia/powiązania do żadnego obiektu.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Plus" xml:space="preserve">
    <value>Dodaje wartość jednego z wyrażeń numerycznych to kolejnego, lub łączy dwa ciagi znaków.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Minus" xml:space="preserve">
    <value>Szuka różnic pomiędzy dwiema wartościami.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Multiply" xml:space="preserve">
    <value>Mnoży wartość dwóch wyrażeń</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Divide" xml:space="preserve">
    <value>Dzieli pierwszy argument przez drugi.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Modulo" xml:space="preserve">
    <value>Zwraca resztę (wartość bezwzględną) z dzielenia jednego wyrażenia numerycznego przez drugi.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_BitwiseOr" xml:space="preserve">
    <value>Porównuje każdy bit pierwszego argumentu z odpowiednim bitem drugiego argumentu. Jeżeli jeden z bitów jest 1, odpowiedni bit wyniku jest ustawiany na 1. W innym przypadku odpowiedni bit wyniku jest ustawiany na 0.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_BitwiseAnd" xml:space="preserve">
    <value>Wykonuje binarną logiczną operację I (AND) pomiędzy dwoma wartościami numerycznymi.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_BitwiseXor" xml:space="preserve">
    <value>Wykonuje logiczne wykluczenie na dwóch wartościach logicznych, lub binarne wykluczenie na dwóch wyrażeniach numerycznych.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Equal" xml:space="preserve">
    <value>Zwraca prawde (true) jezeli oba argumenty mają tą samą wartość. W innym przypadku zwraca fałsz (false).</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_NotEqual" xml:space="preserve">
    <value>Zwraca prawde (true) jezeli oba argumenty nie mają tej samej wartości. W innym przypadku zwraca fałsz (false).</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Less" xml:space="preserve">
    <value>Operator mniejszy niż. Używany do porównania wyrażeń.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_LessOrEqual" xml:space="preserve">
    <value>Operator mniejszy lub równy niż. Używany do porównania wyrażeń.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_GreaterOrEqual" xml:space="preserve">
    <value>Operator większy lub równy niż. Używany do porównania wyrażeń.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Greater" xml:space="preserve">
    <value>Operator większy niż. Używany do porównania wyrażeń.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_In" xml:space="preserve">
    <value>In(,,,)
Testuje istnienie własności obiektu.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Like" xml:space="preserve">
    <value>Porównuje ciag znaków z wzorcem. Jeżeli ciąg odpowiada wzorcowi, wynik jest prawdą (true). Jeżeli ciąg nie odpowiada wzorcowi wynik jest fałszem (false). Jeżeli ciąg i wzorzec jest pustym ciągiem znaków, wynik jest prawda (true).</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Between" xml:space="preserve">
    <value>Between (,)
Określa zakres do przetestowania. Zwraca prawdę (true) jeżeli wartość jest większa bądź równa pierwszemu argumentowi i mniejsza lub równa drugiemu argumentowi.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_And" xml:space="preserve">
    <value>Wykonuje logiczną dysjunkcję na dwóch wyrażeniach logicznych.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Or" xml:space="preserve">
    <value>Wykonuje logiczną dysjunkcję na dwóch wartościach logicznych.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Not" xml:space="preserve">
    <value>Wykonuje logiczną negację wyrażenia.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Max" xml:space="preserve">
    <value>Max(wartość1,wartość2)
Zwraca maksymalną wartość z podanych.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Min" xml:space="preserve">
    <value>Min(wartość1, wartość2)
Zwraca minimalną wartość z podanych.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Abs" xml:space="preserve">
    <value>Abs(wartość)
Zwraca wartość bezwzględną, wartość dodatnią dla podanego wyrażenia.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Acos" xml:space="preserve">
    <value>Acos(Wartość)
Zwraca acos wartości (kąta w radianach, którego kosinus jest wyrażeniem zmiennoprzecinkowym).</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Asin" xml:space="preserve">
    <value>Asin(Wartość)
Zwraca asin z wartosci (kąta w radianach, którego sinus jest podanym wyrażeniem zmiennoprzecinkowym).</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Atn" xml:space="preserve">
    <value>Atan(Wartość)
Zwraca arctan z wartosci (kąta w radianach, którego tangens jest podanym wyrażeniem zmiennoprzecinkowym).</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Atn2" xml:space="preserve">
    <value>Atan2(Wartość1, Wartość2)
Zwraca kąt którego tangens określają dwie wartości numeryczne w radianach.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_BigMul" xml:space="preserve">
    <value>BigMul(Wartość1, Wartość2)
Zwraca wartość typu Int64 będąca mnożeniem dwóch wartości typu Int32.
</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Ceiling" xml:space="preserve">
    <value>Ceiling(Wartość)
Zwraca najmniejszą liczbę całkowitą, która jest większa lub równa podanemu wyrażeniu numerycznemu.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Cos" xml:space="preserve">
    <value>Cos(wartość)
Zwraca cosinus dla kąta zdefiniowanego w radianach.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Sin" xml:space="preserve">
    <value>Sin(wartość)
Zwraca sinus dla kąta zdefiniowanego w radianach.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Tan" xml:space="preserve">
    <value>Tan(wartość)
Zwraca tangens dla kąta zdefiniowanego w radianach.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Cosh" xml:space="preserve">
    <value>Cosh(wartość)
Zwraca cosinus hyperboliczny dla kąta zdefiniowanego w radianach.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Sinh" xml:space="preserve">
    <value>Sinh(wartość)
Zwraca sinus hyperboliczny dla kąta zdefiniowanego w radianach.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Tanh" xml:space="preserve">
    <value>Tanh(wartość)
Zwraca tangens hyperboliczny dla kąta zdefiniowanego w radianach.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Exp" xml:space="preserve">
    <value>Exp(wartość)
Zwraca wartość ekspotencjalną z podanego wyrażenia zmienno-przecinkowego.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Sqr" xml:space="preserve">
    <value>Sqr(wartość)
Zwraca kwadrat podanej wartości.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Floor" xml:space="preserve">
    <value>Floor(wartość)
Zwraca największą wartość całkowitą mniejszą lub równą dla zadanego wyrażenia.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Sign" xml:space="preserve">
    <value>Sign(Wartość)
Zwraca pozytywna (+1), zero (0) lub negatywna (-1) znak podanego wyrażenia.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Round" xml:space="preserve">
    <value>Round(Wartość)
Zaokrągla wartość do najbliższej wartości całkowitej.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Round_2" xml:space="preserve">
    <value>Round(wartość, precyzja)
Zaokrągla podaną wartość do najbliższej liczby całkowitej lub do określonej liczby miejsc dziesiętnych.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Log" xml:space="preserve">
    <value>Log(wartość)
Zwraca naturalny logarytm z podanej wartości.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Log_2" xml:space="preserve">
    <value>Log(wartość, podstawa)
Zwraca logarytm o podanej podstawie z podanej wartości.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Log10" xml:space="preserve">
    <value>Log10(wartość)
Zwraca logarytm o podstawie dziesiętnej z podanej wartości.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Power" xml:space="preserve">
    <value>Power(wartość, potęga)
Zwraca wartosć podniesioną do okreslonej potęgi.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Rnd" xml:space="preserve">
    <value>Rnd()
Zwraca losową wartość numeryczną mniejszą od 1, ale większoą lub równą 0.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_ToInt" xml:space="preserve">
    <value>ToInt(Value)
Konwertuje wartość na odpowiednik 32-bitową całkowitą podpisane.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_ToLong" xml:space="preserve">
    <value>ToLong(Value)
Konwertuje wartość równoważną 64-bitową całkowitą podpisane.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_ToFloat" xml:space="preserve">
    <value>ToFloat(Value)
Konwertuje wartość na odpowiednia liczba zmiennoprzecinkowa pojedyncza precyzja 32-bitowych.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_ToDouble" xml:space="preserve">
    <value>ToDouble(Value)
Konwertuje wartość na równoważne 64-bitowych podwójnej precyzji zmiennoprzecinkowych numer.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_ToDecimal" xml:space="preserve">
    <value>ToDecimal(Value)
Konwertuje wartość na równoważną liczbę dziesiętną.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_StartsWith" xml:space="preserve">
    <value>StartsWith(String, StartString)
Zwraca wartość True, jeśli na początku ciąg pasuje do StartString; w przeciwnym wypadku, zwracana jest wartość False.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_EndsWith" xml:space="preserve">
    <value>(String, EndString)
Zwraca wartość PRAWDA, jeśli na końcu ciąg pasuje do EndString; w przeciwnym wypadku, zwracana jest wartość False.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Contains" xml:space="preserve">
    <value>Contains(String, podciągu)
Zwraca wartość PRAWDA, jeśli występuje podciąg ciągu; w przeciwnym wypadku, zwracana jest wartość False.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Trim" xml:space="preserve">
    <value>Trim(Tekst)
Usuwa wszystkie z przodu i z tyłu białe znaki (spacje) z Tekstu.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Len" xml:space="preserve">
    <value>Len(wartość)
Zwraca ilość bajtów potrzebną do przechowania podanej wartości.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Upper" xml:space="preserve">
    <value>Upper(Tekst)
Zwraca tekst pisany wielkimi literami.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Lower" xml:space="preserve">
    <value>Lower(Tekst)
Zwraca tekst pisany małymi literami.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Concat" xml:space="preserve">
    <value>Concat(Tekst1, ... , TekstN)
Zwraca tekst zawierający złączenie tekstów od Tekst1 do TekstN.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Ascii" xml:space="preserve">
    <value>Ascii(Text)
Zwraca kod ASCII dla znaku najbardziej  na lewo w wyrażeniu.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Reverse" xml:space="preserve">
    <value>Reverse(Tekst)
Odwraca kolejność elementów w tekście.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_ToStr" xml:space="preserve">
    <value>ToStr(Wartość)
Zwraca tekst reprezentowany przez obiekt.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Char" xml:space="preserve">
    <value>Char(Numer)
Zamienia liczbę całkowita na kod ASCII.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_CharIndex" xml:space="preserve">
    <value>CharIndex(Tekst1, Tekst2)
Zwraca pozycje początkową Tekst1 w Tekst2, zaczynając od pozycji 0 do końca tekstu.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_CharIndex_3" xml:space="preserve">
    <value>CharIndex(Tekst1, Tekst2, PozycjaPoczątkowa)
Zwraca pozycje początkową Tekst1 w Tekst2, zaczynając od pozycji PozycjaPoczątkowa do końca tekstu.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_PadLeft" xml:space="preserve">
    <value>PadLeft(Tekst, Długość)
Uzupełnia Tekst z lewej strony o znak odstępu (spacja), aby Tekst osiągnął podaną Długość.
</value>
  </data>
  <data name="ExpressionEditorStringId.Function_PadRight" xml:space="preserve">
    <value>PadRight(Tekst, Długość)
Uzupełnia Tekst z prawej strony o znak odstępu (spacja), aby Tekst osiągnął podaną Długość.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_PadLeft_3" xml:space="preserve">
    <value>PadLeft(Tekst, Długość, Znak)
Uzupełnia Tekst z lewej strony o Znak, aby Tekst osiągnął podaną Długość.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_PadRight_3" xml:space="preserve">
    <value>PadRight(Tekst, Długość, Znak)
Uzupełnia Tekst z prawej strony o Znak, aby Tekst osiągnął podaną Długość.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Remove" xml:space="preserve">
    <value>(String, poprzedniego stanu)
Usuwa wszystkie znaki z tego wystąpienia, począwszy od pozycji określonej.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Remove_3" xml:space="preserve">
    <value>Remove(Tekst, PozycjaPoczątkowa, Długość)
Usuwa określoną ilość znaków z Tekst, rozpoczynając w okreslonej pozycji (PozycjaPoczątkowa).</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Replace" xml:space="preserve">
    <value>Replace(Tekst1,Tekst2, Tekst3)
Zwraca kopię Tekst1, w której Tekst2 został zastąpiony Tekst3.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Insert" xml:space="preserve">
    <value>Insert(Tekst1, PozycjaStartowa, Tekst2)
Wstawia Tekst2 w Tekst1 w pozycji okreslonej przez PozycjaStartowa</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Substring" xml:space="preserve">
    <value>Substring(Tekst, PozycjaPoczątkowa)
Zwraca podciąg z ciągu Tekst zaczynający się od pozycji PozycjaPoczątkowa.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Substring_3" xml:space="preserve">
    <value>Substring(Tekst, PozycjaPoczątkowa, Długość)
Zwraca podciąg z ciągu Tekst zaczynający się od pozycji PozycjaPoczątkowa o zadanej długości.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Iif" xml:space="preserve">
    <value>Iif(Wyrażenie, Pozytywna, Negatywna)
Zwraca odpowiednią cześć Pozytywną lub Negatywną w zależności od wyniku logicznego wyrazenia.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsNull" xml:space="preserve">
    <value>IsNull(wartość)
Zwraca prawdę jeżeli podana wartość jest NULL.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsNullOrEmpty" xml:space="preserve">
    <value>IsNullOrEmpty(Tekst)
Zwraca True (Prawda) jeżeli podany Tekst jest obiektem NULL lub jest pustym słowem, w innym przypadku zwraca False (Fałsz).</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsThisWeek" xml:space="preserve">
    <value>IsThisWeek(DateTime)
Zwraca True Jeśli określony Data wypada w ciągu bieżącego tygodnia.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsThisMonth" xml:space="preserve">
    <value>IsThisMonth(DateTime)
Zwraca True Jeśli określony Data wypada w bieżącym miesiącu.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsThisYear" xml:space="preserve">
    <value>IsThisYear(DateTime)
Zwraca True Jeśli określony Data wypada w bieżącym roku.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeDayAfterTomorrow" xml:space="preserve">
    <value>LocalDateTimeDayAfterTomorrow()
Zwraca wartość daty i godziny odpowiadające pojutrze.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeLastWeek" xml:space="preserve">
    <value>LocalDateTimeLastWeek()
Zwraca wartość daty i godziny odpowiadające pierwszy dzień poprzedniego tygodnia,.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeNextMonth" xml:space="preserve">
    <value>LocalDateTimeNextMonth()
Zwraca wartość daty i godziny odpowiadające pierwszego dnia następnego miesiąca.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeNextWeek" xml:space="preserve">
    <value>LocalDateTimeNextWeek()
Zwraca wartość daty i godziny odpowiadające na pierwszy dzień następnego tygodnia.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeNextYear" xml:space="preserve">
    <value>LocalDateTimeNextYear()
Zwraca wartość daty i godziny odpowiadające pierwszego dnia roku następnego.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeNow" xml:space="preserve">
    <value>LocalDateTimeNow()
Zwraca wartość daty i godziny odpowiadające w czasie, w chwili obecnej.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeThisMonth" xml:space="preserve">
    <value>LocalDateTimeThisMonth()
Zwraca wartość daty i godziny odpowiadające pierwszego dnia bieżącego miesiąca.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeThisWeek" xml:space="preserve">
    <value>LocalDateTimeThisWeek()
Zwraca wartość daty i godziny odpowiadające pierwszego dnia bieżącego tygodnia.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeThisYear" xml:space="preserve">
    <value>LocalDateTimeThisYear()
Zwraca wartość daty i godziny odpowiadające na pierwszy dzień roku bieżącego.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeToday" xml:space="preserve">
    <value>LocalDateTimeToday()
Zwraca wartość daty i godziny odpowiadające dzisiaj.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeTomorrow" xml:space="preserve">
    <value>LocalDateTimeTomorrow()
Zwraca wartość daty i godziny odpowiadające jutro.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeTwoWeeksAway" xml:space="preserve">
    <value>LocalDateTimeTwoWeeksAway()
Zwraca wartość daty i godziny odpowiadające pierwszego dnia tygodnia, czyli po w przyszłym tygodniu.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeYesterday" xml:space="preserve">
    <value>LocalDateTimeYesterday()
Zwraca wartość daty i godziny odpowiadające wczoraj.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_AddTicks" xml:space="preserve">
    <value>AddTicks(DataGodzina,IlośćUderzeń)
Zwraca godzine i datę (DateTime) z dodaną ilością uderzeń do podanej daty (DataGodzina). Uderzenie (Tick) to 1/10000 milisekundy.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_AddMilliSeconds" xml:space="preserve">
    <value>AddMilliSeconds(DataGodzina,IlośćMilisekund)
Zwraca godzine i datę (DateTime) z dodaną ilością milisekund do podanej daty (DataGodzina).</value>
  </data>
  <data name="ExpressionEditorStringId.Function_AddSeconds" xml:space="preserve">
    <value>AddSeconds(DataGodzina,IlośćSekund)
Zwraca godzine i datę (DateTime) z dodaną ilością sekund do podanej daty (DataGodzina).</value>
  </data>
  <data name="ExpressionEditorStringId.Function_AddMinutes" xml:space="preserve">
    <value>AddMinutes(DataGodzina,IlośćMinut)
Zwraca godzine i datę (DateTime) z dodaną ilością minut do podanej daty (DataGodzina).</value>
  </data>
  <data name="ExpressionEditorStringId.Function_AddHours" xml:space="preserve">
    <value>AddHours(DataGodzina,IlośćGodzin)
Zwraca godzine i datę (DateTime) z dodaną ilością godzin do podanej daty (DataGodzina).</value>
  </data>
  <data name="ExpressionEditorStringId.Function_AddDays" xml:space="preserve">
    <value>AddDays(DataGodzina,IlośćDni)
Zwraca godzine i datę (DateTime) z dodaną ilością dni do podanej daty (DataGodzina).</value>
  </data>
  <data name="ExpressionEditorStringId.Function_AddMonths" xml:space="preserve">
    <value>AddMonths(DataGodzina,IlośćMiesięcy)
Zwraca godzine i datę (DateTime) z dodaną ilością miesięcy do podanej daty (DataGodzina).</value>
  </data>
  <data name="ExpressionEditorStringId.Function_AddYears" xml:space="preserve">
    <value>AddYears(DataGodzina,IlośćLat)
Zwraca godzine i datę (DateTime) z dodaną ilością lat do podanej daty (DataGodzina).</value>
  </data>
  <data name="ExpressionEditorStringId.Function_AddTimeSpan" xml:space="preserve">
    <value>AddTimeSpan(DataGodzina,PrzedziałCzasu)
Zwraca godzine i datę (DateTime) z dodanym przedziałem czasu do podanej daty (DataGodzina).</value>
  </data>
  <data name="ExpressionEditorStringId.Function_DateDiffDay" xml:space="preserve">
    <value>DateDiffDay(dataPoczątkowa, dataKońcowa)
Zwraca ilość dni pomiędzy dwiema niepustymi datami.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_DateDiffHour" xml:space="preserve">
    <value>DateDiffHour(dataPoczątkowa, dataKońcowa)
Zwraca ilość godzin pomiędzy dwiema niepustymi datami.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_DateDiffMilliSecond" xml:space="preserve">
    <value>DateDiffMiliSecond(dataPoczątkowa, dataKońcowa)
Zwraca ilość milisekund pomiędzy dwiema niepustymi datami.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_DateDiffMinute" xml:space="preserve">
    <value>DateDiffMinute(dataPoczątkowa, dataKońcowa)
Zwraca ilość minut pomiędzy dwiema niepustymi datami.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_DateDiffMonth" xml:space="preserve">
    <value>DateDiffMiounth(dataPoczątkowa, dataKońcowa)
Zwraca ilość miesięcy pomiędzy dwiema niepustymi datami.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_DateDiffSecond" xml:space="preserve">
    <value>DateDiffSecond(dataPoczątkowa, dataKońcowa)
Zwraca ilość sekund pomiędzy dwiema niepustymi datami.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_DateDiffTick" xml:space="preserve">
    <value>DateDiffTick(dataPoczątkowa, dataKońcowa)
Zwraca ilość ticków (tick = 1/20000 milisekundy) pomiędzy dwiema niepustymi datami.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_DateDiffYear" xml:space="preserve">
    <value>DateDiffYear(dataPoczątkowa, dataKońcowa)
Zwraca ilość lat pomiędzy dwiema niepustymi datami.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetDate" xml:space="preserve">
    <value>GetDate(DzieńCzas)
Wyciąga datę z argumentu.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetDay" xml:space="preserve">
    <value>GetDay(DzieńCzas)
Wyciąga dzień z argumentu.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetDayOfWeek" xml:space="preserve">
    <value>GetDayOfWeek(DzieńCzas)
Wyciąga dzień tygodnia z argumentu.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetDayOfYear" xml:space="preserve">
    <value>GetDayOfYear(DzieńCzas)
Wyciąga dzień roku z argumentu.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetMilliSecond" xml:space="preserve">
    <value>GetMiliSeconds(DzieńCzas)
Wyciąga milisekundy z argumentu.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetMinute" xml:space="preserve">
    <value>GetMinute(DzieńCzas)
Wyciąga minuty z argumentu.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetMonth" xml:space="preserve">
    <value>GetMonth(DzieńCzas)
Wyciąga miesiąc z argumentu.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetSecond" xml:space="preserve">
    <value>GetSecond(DzieńCzas)
Wyciąga sekundy z argumentu.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetTimeOfDay" xml:space="preserve">
    <value>GetTimeOfDay(DzieńCzas)
Wyciąga czas z dnia z argumentu, w Tickach (1/20000 milisekundy)</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetYear" xml:space="preserve">
    <value>GetYear(DzieńCzas)
Wyciąga rok z argumentu.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetHour" xml:space="preserve">
    <value>GetHour(DzieńCzas)
Wyciąga godzinę z argumentu.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Now" xml:space="preserve">
    <value>Now()
Zwraca aktualną datę i czas.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Today" xml:space="preserve">
    <value>Today()
Zwraca aktualną datę. Niezaleznie od aktualnego czasu, funkcja zwraca północ aktualnego dnia.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_UtcNow" xml:space="preserve">
    <value>UtcNow()
Zwraca aktualną datę i czas systemowy, wyrazony w UTC.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_AvgAggregate" xml:space="preserve">
    <value>Avg(Value)
Oblicza średnią z wartości w kolekcja.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_CountAggregate" xml:space="preserve">
    <value>Count()
Zwraca liczbę obiektów w kolekcji.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_ExistsAggregate" xml:space="preserve">
    <value>Exists()
Określa, czy obiekt istnieje w kolekcji.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_MaxAggregate" xml:space="preserve">
    <value>Max(Value)
Zwraca wartość maksymalną wyrażenie w zbiorze.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_MinAggregate" xml:space="preserve">
    <value>Min(Value)
Zwraca wartość minimalna wyrażenia w zbiorze.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_SumAggregate" xml:space="preserve">
    <value>Sum(Value)
Zwraca sumę wszystkich wartości wyrażenie kolekcja.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_SingleAggregate" xml:space="preserve">
    <value>Single()
Zwraca pojedynczy obiekt z kolekcji.</value>
  </data>
</root>